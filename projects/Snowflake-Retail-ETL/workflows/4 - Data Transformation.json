{
  "name": "4 - Data Transformation",
  "uuid": "f52e410b-2730-4dbd-9a52-3cbf0a52becc",
  "category": "-",
  "nodes": [
    {
      "id": "1",
      "name": "Read CSV",
      "description": "It reads in CSV files and creates a DataFrame from it",
      "details": "\u003ch2\u003eRead CSV Details\u003c/h2\u003e\n\u003cbr\u003e\nThis node reads CSV files and creates a DataFrame from them. It can read either a single file or a directory containing multiple files. The user can configure the below fields to parse the file.\u003cbr\u003e\n\u003cbr\u003e\nThe user can choose the \u003cb\u003eOutput storage level\u003c/b\u003e from the drop down. The options in the dropdown can be one of the following:\u003cbr\u003e\n\u003cul\u003e\n\u003cli\u003e \u003cb\u003eMEMORY_ONLY\u003c/b\u003e          Store RDD as deserialized Java objects in the JVM. If the RDD does not fit in memory, some partitions will not be cached and will be recomputed on the fly each time they are needed. This is the default level.\u003c/li\u003e\n\u003cli\u003e \u003cb\u003eMEMORY_AND_DISK\u003c/b\u003e       Store RDD as deserialized Java objects in the JVM. If the RDD does not fit in memory, store the partitions that do not fit on disk, and read them from there when they are needed.\u003c/li\u003e\n\u003cli\u003e \u003cb\u003eMEMORY_ONLY_SER\u003c/b\u003e        Store RDD as serialized Java objects (one byte array per partition). This is generally more space-efficient than deserialized objects, especially when using a fast serializer, but more CPU-intensive to read.\u003c/li\u003e\n\u003cli\u003e \u003cb\u003eMEMORY_AND_DISK_SER\u003c/b\u003e    Similar to MEMORY_ONLY_SER, but spill partitions that do not fit in memory to disk instead of recomputing them on the fly each time they\u0027re needed.\u003c/li\u003e\n\u003cli\u003e \u003cb\u003eDISK_ONLY\u003c/b\u003e              Store the RDD partitions only on disk.\u003c/li\u003e\n\u003cli\u003e \u003cb\u003eMEMORY_ONLY_2, MEMORY_AND_DISK_2 others \u003c/b\u003e . Same as the levels above, but replicate each partition on two cluster nodes.\u003c/li\u003e\n\u003cli\u003e \u003cb\u003eOFF_HEAP\u003c/b\u003e               Similar to MEMORY_ONLY_SER, but store the data in off-heap memory. This requires off-heap memory to be enabled.\u003c/li\u003e\n\u003c/ul\u003e\nThe user needs to provide a data file \u003cb\u003ePath\u003c/b\u003e to read the data from. This is a required field.\u003cbr\u003e\n\u003cbr\u003e\nThe user can choose the \u003cb\u003eSeparator\u003c/b\u003e used in the data file to parse it. The default separator is \u003cb\u003e( , )\u003c/b\u003e comma.\u003cbr\u003e\n\u003cbr\u003e\nIn the \u003cb\u003eHeader\u003c/b\u003e field, one can choose:\u003cbr\u003e\n\u003cul\u003e\n\u003cli\u003e \u003cb\u003etrue\u003c/b\u003e if the data file has a header.\u003c/li\u003e\n\u003cli\u003e \u003cb\u003efalse\u003c/b\u003e Otherwise.\u003c/li\u003e\n\u003c/ul\u003e\nIn the \u003cb\u003eDrop special character in column name\u003c/b\u003e field, one can choose:\u003cbr\u003e\n\u003cul\u003e\n\u003cli\u003e \u003cb\u003etrue\u003c/b\u003e If you want to remove the special characters from column names.\u003c/li\u003e\n\u003cli\u003e \u003cb\u003efalse\u003c/b\u003e Otherwise.\u003c/li\u003e\n\u003c/ul\u003e\nIn the \u003cb\u003eMode\u003c/b\u003e field, one can choose from the below options in the dropdown:\u003cbr\u003e\n\u003cul\u003e\n\u003cli\u003e \u003cb\u003ePERMISSIVE\u003c/b\u003e When the parser meets a corrupt field in a record, it sets the value of the field to NULL and continues to the next record.\u003c/li\u003e\n\u003cli\u003e \u003cb\u003eDROPMALFORMED\u003c/b\u003e ignores the whole corrupted record.\u003c/li\u003e\n\u003cli\u003e \u003cb\u003eFAILFAST\u003c/b\u003e throws an exception when it meets corrupted records.\u003c/li\u003e\n\u003c/ul\u003e\nIn the \u003cb\u003eEnforce Schema\u003c/b\u003e field, one can choose:\u003cbr\u003e\n\u003cul\u003e\n\u003cli\u003e \u003cb\u003etrue\u003c/b\u003e The specified or inferred schema will be forcibly applied to datasource files, and headers in CSV files will be ignored.\u003c/li\u003e\n\u003cli\u003e \u003cb\u003efalse\u003c/b\u003e The schema will be validated against all headers in CSV files when the header option is set to \u003cb\u003efalse\u003c/b\u003e.\u003c/li\u003e\n\u003c/ul\u003e\nIn the \u003cb\u003eWhether to add input file as a column in DataFrame\u003c/b\u003e field, one can choose:\u003cbr\u003e\n\u003cul\u003e\n\u003cli\u003e \u003cb\u003etrue\u003c/b\u003e There will be a new column added to the DataFrame at the end, which can be seen in the schema columns. One can enter the name of this column.\u003c/li\u003e\n\u003cli\u003e \u003cb\u003efalse\u003c/b\u003e This functionality is disabled, and the DataFrame consists of only the columns read from the data file.\u003c/li\u003e\n\u003c/ul\u003e\nIn the \u003cb\u003eENCODING\u003c/b\u003e field, one can specify the encoding type to be used for reading the files. By default, it is set as \u003cb\u003eUTF-8\u003c/b\u003e.\u003cbr\u003e\n\u003cbr\u003e\nThe \u003cb\u003eQUOTE\u003c/b\u003e field sets a single character used for escaping quoted values where the separator can be part of the value. The default value for this is \u003cb\u003e( \" )\u003c/b\u003e, a double quote.\u003cbr\u003e\n\u003cbr\u003e\nThe \u003cb\u003eESCAPE\u003c/b\u003e field sets a single character used for escaping quotes inside an already quoted value. The default value for this is \u003cb\u003e( \\ )\u003c/b\u003e, a backslash.\t\u003cbr\u003e\n\u003cbr\u003e\nAfter the above options are set, one can click on \u003cb\u003eRefresh Schema\u003c/b\u003e to see the final columns.\u003cbr\u003e\nUsers can still add or delete columns using \u003cb\u003e+\u003c/b\u003e button next to the refresh schema and \u003cb\u003e-\u003c/b\u003e button next to the column names.\u003cbr\u003e",
      "examples": "",
      "type": "dataset",
      "nodeClass": "fire.nodes.dataset.NodeDatasetCSV",
      "x": "112px",
      "y": "182px",
      "hint": "Refresh the schema when a new file is selected or the file content has changed",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "path",
          "value": "/home/sparkflows/fire-data/ETL_Sample_Data/Combined_Order_Data",
          "widget": "textfield",
          "title": "Path",
          "description": "Path of the file/directory",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "separator",
          "value": ",",
          "widget": "textfield",
          "title": "Separator",
          "description": "CSV Separator",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "header",
          "value": "true",
          "widget": "array",
          "title": "Header",
          "description": "Whether the file has a header row",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "dropSpecialCharacterInColumnName",
          "value": "false",
          "widget": "array",
          "title": "Drop Special Character In ColumnName",
          "description": "Whether to drop the Special Characters and Spaces in Column Name.",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "mode",
          "value": "PERMISSIVE",
          "widget": "array",
          "title": "Mode",
          "description": "Mode for dealing with corrupt records during parsing.",
          "optionsArray": [
            "PERMISSIVE",
            "DROPMALFORMED",
            "FAILFAST"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "enforceSchema",
          "value": "false",
          "widget": "array",
          "title": "Enforce Schema",
          "description": "If it is set to true, the specified or inferred schema will be forcibly applied to datasource files, and headers in CSV files will be ignored. If the option is set to false, the schema will be validated against all headers in CSV files in the case when the header option is set to true.",
          "optionsArray": [
            "false",
            "true"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "addInputFileName",
          "value": "false",
          "widget": "array",
          "title": "Whether to add Input File Name as a column in the Dataframe",
          "description": "Add the new field:input_file_name",
          "optionsArray": [
            "false",
            "true"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "encoding",
          "value": "UTF-8",
          "widget": "textfield",
          "title": "Encoding",
          "description": "Decodes the CSV files by the given encoding type",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "quote",
          "value": "\"",
          "widget": "textfield",
          "title": "Quote",
          "description": "Sets a single character used for escaping quoted values where the separator can be part of the value",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "escape",
          "value": "\\",
          "widget": "textfield",
          "title": "Escape",
          "description": "Sets a single character used for escaping quotes inside an already quoted value.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "outputColNames",
          "value": "[\"Product_ID\",\"Transaction_ID\",\"Customer_ID\",\"Customer_Type\",\"Customer_Name\",\"Country\",\"State\",\"City\",\"Sales_Org\",\"Quantity\",\"Order_ID\",\"Order_Date\",\"Sales_Channel\",\"Order_Status\",\"Currency_Type\",\"Price\",\"Tax\",\"Discount_Perc\",\"Payment_Terms\",\"Transaction_Date\",\"Product_Group_Code\",\"Product_Group_Desc\"]",
          "widget": "schema_col_names",
          "title": "Column Names for the CSV",
          "description": "New Output Columns of the SQL",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "outputColTypes",
          "value": "[\"INTEGER\",\"DOUBLE\",\"DOUBLE\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"INTEGER\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"STRING\",\"STRING\",\"INTEGER\",\"STRING\"]",
          "widget": "schema_col_types",
          "title": "Column Types for the CSV",
          "description": "Data Type of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "outputColFormats",
          "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",
          "widget": "schema_col_formats",
          "title": "Column Formats for the CSV",
          "description": "Format of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        }
      ],
      "engine": "all"
    },
    {
      "id": "3",
      "name": "Null Values In Column",
      "description": "Number of Null Values in Selected Columns.",
      "details": "This node identifies number of Null values and its percentage against the total data length in the selected columns.\u003cbr\u003e",
      "examples": "A set of columns can be selected to display count of Null values on.\u003cbr\u003e\n\u003cbr\u003e\nIf NullValuesInColumn node is configured to display count of Null values in [EMP_CD], [EMP_NAME], [DEPT] and [AGE] columns from the incoming dataset\u003cbr\u003e\n\u003cbr\u003e\nthen outgoing Dataframe would be created as below displaying count of Null values in each column and it\u0027s percentage.\u003cbr\u003e",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeNullValuesInColumn",
      "x": "279px",
      "y": "45px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "inputCols",
          "value": "[\"Price\",\"Discount_Perc\"]",
          "widget": "variables",
          "title": "Column Names",
          "description": "Name of columns for Number of Null Values Check",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        }
      ],
      "engine": "scala"
    },
    {
      "id": "4",
      "name": "Impute Advanced",
      "description": "It imputes missing or given value with constant value,mean, median or mode",
      "details": "This node imputes missing values or replaces  specified values in the selected columns by mean, meadian, mode or constant.\u003cbr\u003e",
      "examples": "Incoming Dataframe has following rows and missing value / [NULL] for some rows:\u003cbr\u003e\n\u003cbr\u003e\n+---+----+----+----+----+\u003cbr\u003e\n| ID|  X1|  X2|  X3|  X4|\u003cbr\u003e\n+---+----+----+----+----+\u003cbr\u003e\n|  1|4.45| 5.6|null| 7.0|\u003cbr\u003e\n|  2|5.83|5.72|2.55|10.0|\u003cbr\u003e\n|  3|1.54|6.97|3.54| 3.0|\u003cbr\u003e\n|  4|null|3.98|4.95| 2.0|\u003cbr\u003e\n|  5| 3.1|null|8.42|null|\u003cbr\u003e\n|  6|8.74| 6.1|1.91| 4.0|\u003cbr\u003e\n|  7|null|0.01|8.07| 5.0|\u003cbr\u003e\n|  8|7.51|6.31|5.94| 4.0|\u003cbr\u003e\n|  9|1.21|4.74|1.91| 5.0|\u003cbr\u003e\n| 10|1.85|7.02|null| 6.0|\u003cbr\u003e\n+---+----+----+----+----+\u003cbr\u003e\n\u003cbr\u003e\nIf Impute Advanced node is configured to:\u003cbr\u003e\n        selected column: X1 -\u003e Imputation strategy -\u003eMean\u003cbr\u003e\n        selected column: X2 -\u003e Imputation strategy -\u003eMedian\u003cbr\u003e\n        selected column: X3 -\u003e Imputation strategy -\u003eMode\u003cbr\u003e\n        selected column: X4 -\u003e Imputation strategy -\u003eConstant -\u003e 123\u003cbr\u003e\n        selcted column : X1 -\u003e Imputation Strategy -\u003eMedian -\u003e Replace value -\u003e 3.1\u003cbr\u003e\n        selected column: X2 -\u003e Imputation Strategy -\u003eConstant -\u003eReplace value -\u003e 0.01\u003cbr\u003e\nOutgoing Dataframe would result as below:\u003cbr\u003e\n\u003cbr\u003e\n+---+----+----+----+-------+\u003cbr\u003e\n| ID|  X1|  X2|  X3|     X4|\u003cbr\u003e\n+---+----+----+----+-------+\u003cbr\u003e\n|  1|4.45| 5.6|1.91|    7.0|\u003cbr\u003e\n|  2|5.83|5.72|2.55|   10.0|\u003cbr\u003e\n|  3|1.54|6.97|3.54|    3.0|\u003cbr\u003e\n|  4|4.28|3.98|4.95|    2.0|\u003cbr\u003e\n|  5|4.28|5.72|8.42|  123.0|\u003cbr\u003e\n|  6|8.74| 6.1|1.91|    4.0|\u003cbr\u003e\n|  7|4.28| 1.0|8.07|    5.0|\u003cbr\u003e\n|  8|7.51|6.31|5.94|    4.0|\u003cbr\u003e\n|  9|1.21|4.74|1.91|    5.0|\u003cbr\u003e\n| 10|1.85|7.02|1.91|    6.0|\u003cbr\u003e\n+---+----+----+----+-------+\u003cbr\u003e\n\u003cbr\u003e\nSimilarly if one wants to replace a particular value by mean/median/mode/constant, This can be achieved by specifying replace value in the node configration.\u003cbr\u003e",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeImputeAdvanced",
      "x": "254px",
      "y": "233px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "inputCols",
          "value": "[\"Price\",\"Discount_Perc\"]",
          "widget": "variables_list_select",
          "title": "Columns",
          "description": "Columns to be processed for missing values",
          "datatypes": [
            "integer",
            "long",
            "double",
            "float"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "strategy",
          "value": "[\"mean\",\"constant\"]",
          "widget": "variables_list_array",
          "title": "Impute Strategy",
          "description": "Imputing Strategy",
          "optionsArray": [
            "mean",
            "median",
            "mode",
            "constant"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "replaceValue",
          "value": "[\"\",\"\"]",
          "widget": "variables_list_textfield",
          "title": "Replace Value",
          "description": "Value to replace, when empty it replaces the missing values",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "constants",
          "value": "[\"\",\"0\"]",
          "widget": "variables_list_textfield",
          "title": "Constant",
          "description": "Missing value will be replaced with constant.Applicable only when imputation strategy is constant",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        }
      ],
      "engine": "all"
    },
    {
      "id": "5",
      "name": "Flag Outlier",
      "description": "Flag the outlier based on the selected column using Box-and-Whisker technique.",
      "details": "This node identifies whether a data point is outlier in a series or not based on the lower and upper quantile set. \u003cbr\u003e\n\u003cbr\u003e\nIt can be checked against numeric columns only.\u003cbr\u003e",
      "examples": "FlagOutlier node can be configured as below:\u003cbr\u003e\n\u003cbr\u003e\nINPUT COLUMN TO FLAG THE OUTLIER\t:\tSALARY\u003cbr\u003e\nLOWERQUANTILE\t\t\t\t\t\t          :\t0.25\u003cbr\u003e\nUPPERQUANTILE\t\t\t\t\t\t          :\t0.75\u003cbr\u003e\n\u003cbr\u003e\nNew column [is_SALARY_outlier] would be added to the output specifing whether a data point is outlier or not.\u003cbr\u003e",
      "type": "transform",
      "nodeClass": "fire.nodes.ml.NodeFlagOutlier",
      "x": "427px",
      "y": "62px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "inputCol",
          "value": "Price",
          "widget": "variable",
          "title": "Input Column to flag the outlier",
          "description": "The Input Column to flag the outlier",
          "datatypes": [
            "double",
            "integer",
            "float"
          ],
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "lowerQuantile",
          "value": "0.25",
          "widget": "textfield",
          "title": "LowerQuantile",
          "description": "",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "upperQuantile",
          "value": "0.75",
          "widget": "textfield",
          "title": "UpperQuantile",
          "description": "",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        }
      ],
      "engine": "all"
    },
    {
      "id": "6",
      "name": "Columns Cardinality",
      "description": "Distribution of categorical data. Calculates the count of records for each unique value for the column specified.",
      "details": "This node displays distribution of categorical data. Calculates the count of records for each unique value for the column specified.\u003cbr\u003e\n\u003cbr\u003e\nThis node facilitates selection of multiple String columns. Distribution of each column is displayed separately.\u003cbr\u003e",
      "examples": "If ColumnsCardinality node is configured to display distribution on two columns i.e. [DEPT] and [SALARY_GRADE] from the incoming dataset \u003cbr\u003e\nthen output would be created as below:\u003cbr\u003e\n\u003cbr\u003e\n\u003ch2\u003e Columns Unique Count \u003c/h2\u003e\ndisplaying count of unique values for each column\u003cbr\u003e\n\u003cbr\u003e\n\u003cbr\u003e\nDEPT\t: 3\u003cbr\u003e\nSALARY_GRADE\t: 3\u003cbr\u003e\n\u003cbr\u003e\n\u003ch2\u003e Distribution of first selected column [DEPT]\u003c/h2\u003e\n\u003cbr\u003e\nHR : 3\u003cbr\u003e\nSALES : 3\u003cbr\u003e\nMANAGEMENT : 1\u003cbr\u003e\n\u003cbr\u003e\n\u003ch2\u003e Distribution of second selected column [SALARY_GRADE]\u003c/h2\u003e\n\u003cbr\u003e\nHIGH : 3\u003cbr\u003e\nMID : 2\u003cbr\u003e\nLOW : 2\u003cbr\u003e",
      "type": "transform",
      "nodeClass": "fire.nodes.ml.NodeColumnsCardinality",
      "x": "604px",
      "y": "40px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "maxValuesToDisplay",
          "value": "20",
          "widget": "textfield",
          "title": "Max Values To Display",
          "description": "Maximum number of values to display in result.",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "inputCols",
          "value": "[\"is_Price_outlier\"]",
          "widget": "variables",
          "title": "Column Names",
          "description": "Name of columns for the cardinality data",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        }
      ],
      "engine": "scala"
    },
    {
      "id": "7",
      "name": "Date Time Field Extract",
      "description": "It creates a new DataFrame by extracting Date and Time fields.",
      "details": "",
      "examples": "If incoming Dataframe has Date value as 2022-01-01 14:30:45 in YYYY-MM-DD HH:mm:ss format then using datetimeextract node would result in followings \u003cbr\u003e\nadded as new columns to the Dataframe:\u003cbr\u003e\n\u003cbr\u003e\n\u003cul\u003e\n\u003cli\u003e YEAR : 2022 \u003c/li\u003e\n\u003cli\u003e MONTH : 01\u003c/li\u003e\n\u003cli\u003e DAY OF MONTH : 01 \u003c/li\u003e\n\u003cli\u003e HOUR : 14\u003c/li\u003e\n\u003cli\u003e MINUTE : 30\u003c/li\u003e\n\u003cli\u003e SECOND : 45\u003c/li\u003e\n\u003cli\u003e WEEKOFYEAR : 1\u003c/li\u003e\n\u003c/ul\u003e",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeDateTimeFieldExtract",
      "x": "528px",
      "y": "300px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "inputCol",
          "value": "Order_Date_Type",
          "widget": "variable",
          "title": "Column",
          "description": "The input column name",
          "datatypes": [
            "date",
            "timestamp"
          ],
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "extractYear",
          "value": "false",
          "widget": "array",
          "title": "Extract Year",
          "description": "Extract Year",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "true",
            "false"
          ],
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "extractMonth",
          "value": "true",
          "widget": "array",
          "title": "Extract Month",
          "description": "Extract Month",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "true",
            "false"
          ],
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "extractDayOfMonth",
          "value": "true",
          "widget": "array",
          "title": "Extract Day of Month",
          "description": "Extract Day of Month",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "true",
            "false"
          ],
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "extractHour",
          "value": "false",
          "widget": "array",
          "title": "Extract Hour",
          "description": "Extract Hour",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "true",
            "false"
          ],
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "extractMinute",
          "value": "false",
          "widget": "array",
          "title": "Extract Minute",
          "description": "Extract Minute",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "true",
            "false"
          ],
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "extractSecond",
          "value": "false",
          "widget": "array",
          "title": "Extract Second",
          "description": "Extract Second",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "true",
            "false"
          ],
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "extractWeekOfYear",
          "value": "false",
          "widget": "array",
          "title": "Extract Week Of Year",
          "description": "Extract WeekOfYear",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "true",
            "false"
          ],
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "extractDayOfWeek",
          "value": "false",
          "widget": "array",
          "title": "Extract Day Of Week",
          "description": "Extract Day Of Week",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "true",
            "false"
          ],
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "extractDayOfYear",
          "value": "false",
          "widget": "array",
          "title": "Extract Day Of Year",
          "description": "Extract Day Of Year",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "true",
            "false"
          ],
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "extractMonthName",
          "value": "false",
          "widget": "array",
          "title": "Extract Month Name",
          "description": "Extract Month Name",
          "datatypes": [
            "boolean"
          ],
          "optionsArray": [
            "true",
            "false"
          ],
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        }
      ],
      "engine": "all"
    },
    {
      "id": "8",
      "name": "String To Date",
      "description": "This node converts a string column to date using the given date/time format",
      "details": "",
      "examples": "\u003ch2\u003eFormat Examples\u003c/h2\u003e\n\u003cbr\u003e\n\u003cul\u003e\n\u003cli\u003e dd-MM-yy : 31-01-12\u003c/li\u003e\n\u003cli\u003e dd-MM-yyyy : 31-01-2012\u003c/li\u003e\n\u003cli\u003e MM-dd-yyyy : 01-31-2012\u003c/li\u003e\n\u003cli\u003e yyyy-MM-dd : 2012-01-31\u003c/li\u003e\n\u003cli\u003e yyyy-MM-dd HH:mm:ss : 2012-01-31 23:59:59\u003c/li\u003e\n\u003cli\u003e yyyy-MM-dd HH:mm:ss.SSS : 2012-01-31 23:59:59.999\u003c/li\u003e\n\u003cli\u003e yyyy-MM-dd HH:mm:ss.SSSZ : 2012-01-31 23:59:59.999+0100\u003c/li\u003e\n\u003cli\u003e EEEEE MMMMM yyyy HH:mm:ss.SSSZ : Saturday November 2012 10:45:42.720+0100\u003c/li\u003e\n\u003c/ul\u003e\nOUTPUT COLUMN NAME: - If user inputs an existing column name, it overrides the column \u003cbr\u003e\n                      otherwise it will add a new column.\u003cbr\u003e",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeStringToDate",
      "x": "386px",
      "y": "321px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "inputColName",
          "value": "Order_Date",
          "widget": "variable",
          "title": "Input Column Name",
          "description": "Input Column Name",
          "datatypes": [
            "string"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "inputColFormat",
          "value": "MM/dd/yyyy",
          "widget": "textfield",
          "title": "Input Column Format",
          "description": "Input Column Format. eg: yyyy-MM-dd yyyy-MM-dd HH:mm:ss",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "outputColName",
          "value": "Order_Date_Type",
          "widget": "textfield",
          "title": "Output Column Name",
          "description": "Output Column Name",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "outputColType",
          "value": "DATE",
          "widget": "array",
          "title": "Output Column Type",
          "description": "Output Column Type",
          "optionsArray": [
            "DATE",
            "TIMESTAMP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        }
      ],
      "engine": "scala"
    },
    {
      "id": "9",
      "name": "Columns Rename",
      "description": "This node creates a new DataFrame by renaming existing columns with the new name",
      "details": "This node creates a new DataFrame by renaming existing columns with the new name.\u003cbr\u003e\n\u003cbr\u003e\nFor the columns to be renamed, provide the new column name. The output dataframe would have the specified columns renamed to the new ones.\u003cbr\u003e",
      "examples": "If incoming Dataframe has a column as [CUST NAME] that needs to be renamed to [CUST_NAME] then below details need to be provided in the node:\u003cbr\u003e\n\u003cbr\u003e\n\u003cul\u003e\n\u003cli\u003e CURRENT COLUMN NAMES : CUST NAME\u003c/li\u003e\n\u003cli\u003e COLUMNS NEW NAME : CUST_NAME\u003c/li\u003e\n\u003c/ul\u003e\nThis would result in output Dataframe having renameed column [CUST_NAME]. A seprate row needs to be added for each Column Rename requirement.\u003cbr\u003e",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeColumnsRename",
      "x": "687px",
      "y": "274px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "currentColNames",
          "value": "[\"Order_Date_Type_dayofmonth\",\"Order_Date_Type_month\"]",
          "widget": "variables_list_select",
          "title": "Current Column Names",
          "description": "Current Column Names",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "newColNames",
          "value": "[\"Order_Day\",\"Order_Month\"]",
          "widget": "variables_list_textfield",
          "title": "Columns New Name",
          "description": "New name for existing columns",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        }
      ],
      "engine": "all"
    },
    {
      "id": "10",
      "name": "Group By",
      "description": "Group By Node",
      "details": "\u003ch2\u003eGroup By Details\u003c/h2\u003e\n\u003cbr\u003e\n\u003ch3\u003eAggregation Settings\u003c/h3\u003e\nThis node groups row values based on categorical columns selected by the user and then calculates aggregate statistics of the grouped columns. \u003cbr\u003e\nThe Grouping Columns allows the user to select which columns to group rows by, and the Variables List allows the user to select which aggregate statistics will be generated. \u003cbr\u003e\n\u003cbr\u003e\n\u003ch3\u003eFilter Settings\u003c/h3\u003e\nThe Filter Settings allow the user to provide additional clauses before and after the data is aggregated.\u003cbr\u003e\nThe Where Clause allows the user to filter the data before it is aggregated, and the Having Clause allows the user to filter the data after it has been aggregated. \u003cbr\u003e\nBoth the Where and Having Clauses are similar in use to those that exist in many forms of SQL.\u003cbr\u003e",
      "examples": "Incoming Dataframe has following rows:\u003cbr\u003e\n\u003cbr\u003e\nEMP_CD    |    EMP_NAME    |    LOCATION    |    DEPT         |    SALARY\u003cbr\u003e\n-----------------------------------------------------------------------------\u003cbr\u003e\nE01       |    DAVID       |    NEW YORK    |    HR           |    10000\u003cbr\u003e\nE02       |    JOHN        |    NEW JERSEY  |    SALES        |    11000\u003cbr\u003e\nE03       |    MARTIN      |    NEW YORK    |    MARKETING    |    12000\u003cbr\u003e\nE04       |    TONY        |    NEW JERSEY  |    MARKETING    |    13000\u003cbr\u003e\nE05       |    ROSS        |    NEW YORK    |    FRONT DESK   |    10000\u003cbr\u003e\nE06       |    LISA        |    NEW JERSEY  |    FRONT DESK   |    11000\u003cbr\u003e\nE07       |    PAUL        |    NEW YORK    |    MAINTENANCE  |    12000\u003cbr\u003e\nE08       |    MARK        |    NEW JERSEY  |    MAINTENANCE  |    13000\u003cbr\u003e\n\u003cbr\u003e\nif GroupBy node is configured as below:\u003cbr\u003e\n\u003cbr\u003e\nGROUPING COLUMNS      :    DEPT\u003cbr\u003e\n\u003cbr\u003e\nAGGREGATE COLUMNS    |    AGGREGATE OPERATION\u003cbr\u003e\n-------------------------------------------------\u003cbr\u003e\nEMP_CD               |    COUNT\u003cbr\u003e\nSALARY               |    SUM\u003cbr\u003e\n\u003cbr\u003e\nthen outgoing Dataframe would be created as below after performing specified aggregation\u003cbr\u003e\nCount of Employees and Summation of Salary all Employees is computed for each [DEPT]:\u003cbr\u003e\n\u003cbr\u003e\nDEPT           |    count_emp_cd    |    sum_salary\u003cbr\u003e\n----------------------------------------------------------\u003cbr\u003e\nFRONT DESK     |    2               |    21000\u003cbr\u003e\nMARKETING      |    2               |    25000\u003cbr\u003e\nHR             |    1               |    10000\u003cbr\u003e\nSALES          |    1               |    11000\u003cbr\u003e\nMAINTENANCE    |    2               |    25000\u003cbr\u003e\n\u003cbr\u003e\nif [WHERE CLAUSE] is entered as [DEPT \u003d \u0027HR\u0027] then outgoing Dataframe would consists of data only from HR department.\u003cbr\u003e\n\u003cbr\u003e\nif [HAVING CLAUSE] is entered as [COUNT(*) \u003e 1] then outgoing Dataframe would consists of data for Department where count of Employees is more than 1.\u003cbr\u003e",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeGroupBy",
      "x": "978px",
      "y": "84px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "Aggregation Setting",
          "value": "",
          "widget": "tab",
          "title": "Aggregation Setting",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "groupingCols",
          "value": "[\"Customer_Name\"]",
          "widget": "variables",
          "title": "Grouping Columns",
          "description": "Grouping Columns",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "aggregateCols",
          "value": "[\"Price\"]",
          "widget": "variables_list_select",
          "title": "Aggregate Columns",
          "description": "Aggregate Columns",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "aggregateOperations",
          "value": "[\"sum\"]",
          "widget": "variables_list_array",
          "title": "Aggregate Operation",
          "description": "Aggregate Operation",
          "optionsArray": [
            "sum",
            "avg",
            "min",
            "max",
            "count",
            "count_distinct"
          ],
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "outputColNames",
          "value": "[\"Revenue\"]",
          "widget": "variables_list_textfield",
          "title": "Output Column Names",
          "description": "Output Column Names, default value is aggregateOperation_aggregateCol.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "Filter Setting",
          "value": "",
          "widget": "tab",
          "title": "Filter Setting",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "whereClause",
          "value": "",
          "widget": "textarea_small",
          "title": "Where Clause",
          "description": "where condition before group by function",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "havingClause",
          "value": "",
          "widget": "textarea_small",
          "title": "Having Clause",
          "description": "having condition after group by function",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        }
      ],
      "engine": "all"
    },
    {
      "id": "11",
      "name": "Case When",
      "description": "This node creates a new Dataframe with a new column appended to it containing value based on the condition met",
      "details": "\u003ch2\u003eCase When Node Details\u003c/h2\u003e\n\u003cbr\u003e\nThis node creates a new Dataframe with new output column added to the incoming dataframe. Value of the new column is set based on the Condition met and corresponding value fetched.\u003cbr\u003e\n\u003cbr\u003e\nIt evaluates a set of expressions and outputs value of the expression that evaluates to true. If none of the expressions evaluates to true then it outputs value assigned in the \u0027else\u0027 section.\u003cbr\u003e\n\u003cbr\u003e\n\u003ch3\u003eWhen conditions can be entered as followings:\u003c/h3\u003e\n\u003cbr\u003e\n\u003ch4\u003eUsing Comparison Operators\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\tComparing a value against a String column\t\t-\u003e\t\tExample:\tPRD_CATEGORY \u003d \u0027MACHINE\u0027\u003c/li\u003e\n\u003cli\u003e\tChecking for not equal to condition against a String column\t\t-\u003e\t\tExample:\tPRD_CATEGORY !\u003d \u0027MACHINE\u0027\u003c/li\u003e\n\u003cli\u003e\tComparing a value against a Numeric column\t\t-\u003e\t\tExample:\tAGE \u003e\u003d 35\u003c/li\u003e\n\u003cli\u003e\tUsing a Mathematical operator\t\t\t\t\t-\u003e\t\tExample:\t(AGE * 10) \u003c 90\u003c/li\u003e\n\u003cli\u003e Checking for multiple values using IN and NOT IN  -\u003e  Example:    DEPT IN (\u0027HR\u0027, \u0027SALES\u0027)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eUsing Logical Operators To Combine Multiple Expressions\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\tChecking for two conditions in single expression\t-\u003e\t\tExample:\tDEPT \u003d \u0027HR\u0027 AND AGE \u003e\u003d 25\u003c/li\u003e\n\u003cli\u003e\tChecking for two conditions in single expression\t\t-\u003e\t\tExample:\tAGE \u003e\u003d 35 OR AGE \u003c45\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eChecking For Null Value\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\tChecking whether a column value is Null\t\t\t-\u003e\t\tExample:\tDEPT IS NULL\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eChecking For Blank Value\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\tChecking whether value in a column is empty\t\t-\u003e\t\tExample:\tTRIM(DATE_OF_JOINING) \u003d \u0027\u0027\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eChecking Against Boolean Value\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\tChecking whether a Boolean column is True or False\t\t-\u003e\t\tExample:\tIS_DATEGREATER \u003d TRUE\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eChecking Against Date-Time Value\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\tComparing a Date column against a Date value\t-\u003e\t\tExample:\tCURR_DATE \u003e TO_DATE(\u00272021-12-12\u0027,\u0027yyyy-MM-dd\u0027)\u003c/li\u003e\n\u003cli\u003e\tComparing a Date-Time column against a Date-Time value\t-\u003e\t\tExample:\tCURR_TIME \u003e TO_TIMESTAMP(\u00272021-12-12 12:12:12\u0027,\u0027yyyy-MM-dd HH:mm:ss\u0027)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr\u003e\n\u003ch3\u003eValues can entered as followings:\u003c/h3\u003e\n\u003cbr\u003e\n\u003ch4\u003eAssigning value from a column\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e \tAssigning value from a column[DEPT] to output (Value)\t\t-\u003e\t\tExample:\tDEPT\u003c/li\u003e\n\u003cli\u003e \tApplying a operator before assigning value from a column\t\t-\u003e\t\tExample:\tSALARY * 10\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eAssigning a String or Number constant\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\tAssigning a String constant\t\t-\u003e\t\tExample:\t\u0027DEPT IS HR\u0027\u003c/li\u003e\n\u003cli\u003e\tAssigning a Number constant\t\t-\u003e\t\tExample:\t1000\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eAssigning Current Date and Current Timestamp\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\tAssigning Current Date\t\t-\u003e\t\tExample:\tCURRENT_DATE\u003c/li\u003e\n\u003cli\u003e\tAssigning Current Date-Time\t\t-\u003e\t\tExample:\tCURRENT_TIMESTAMP\u003c/li\u003e\n\u003c/ul\u003e",
      "examples": "\u003ch2\u003eCase When Node Examples\u003c/h2\u003e\n\u003cbr\u003e\n\u003ch4\u003eIncoming Dataframe\u003c/h4\u003e\n\u003cbr\u003e\nIn this example we have considered a Incoming Dataframe with following rows:\u003cbr\u003e\n\u003cbr\u003e\nEMP_CD    |    EMP_NAME    |    DEPT       |    AGE    |    DATE_OF_JOINING   |    PERFORMANCE     |    SALARY\u003cbr\u003e\n------------------------------------------------------------------------------------------------------------------\u003cbr\u003e\nE01       |    DAVID       |    HR         |    25     |    2021-01-01        |    GOOD            |    12000\u003cbr\u003e\nE02       |    JOHN        |    SALES      |    35     |    2019-05-04        |    VERY GOOD       |    11000\u003cbr\u003e\nE03       |    MARTIN      |    MARKETING  |    40     |    2018-06-07        |    AVERAGE         |    34000\u003cbr\u003e\nE04       |    TONY        |    MARKETING  |    45     |    2017-02-01        |    VERY VERY GOOD  |    12500\u003cbr\u003e\nE05       |    MARK        |    HR         |    25     |    2020-12-21        |    BAD             |    78999\u003cbr\u003e\n\u003cbr\u003e\n\u003ch4\u003eCaseWhen Node Configuration\u003c/h4\u003e\n\u003cbr\u003e\nCaseWhen node is configured as below to compute values for the output column:\u003cbr\u003e\n\u003cbr\u003e\nWHEN CONDITION                        |        VALUE\u003cbr\u003e\n------------------------------------------------------------------\u003cbr\u003e\nSALARY \u003c 12500                        |        \u0027FIRST_GRADE\u0027\u003cbr\u003e\nSALARY\u003e\u003d 12500 AND SALARY \u003c 30000     |        \u0027SECOND_GRADE\u0027\u003cbr\u003e\nSALARY \u003e- 30000 AND SALARY \u003c 70000    |        \u0027THIRD_GRADE\u0027\u003cbr\u003e\nELSE                                  |        \u0027FOURTH_GRADE\u0027\u003cbr\u003e\n\u003cbr\u003e\n[ELSE] is the default condition processed if no other condition is met\u003cbr\u003e\n\u003cbr\u003e\n\u003ch4\u003eNode Output\u003c/h4\u003e\n\u003cbr\u003e\nOutput Dataframe would be created as below where value of [SALARY] is compared against [WHEN CONDITION] and [VALUE] is fetched for the output column [SALARY_GRADE]:\u003cbr\u003e\n\u003cbr\u003e\nEMP_CD    |    EMP_NAME    |    DEPT       |    AGE    |    DATE_OF_JOINING   |    PERFORMANCE     |    SALARY    |    SALARY_GRADE\u003cbr\u003e\n---------------------------------------------------------------------------------------------------------------------------------------\u003cbr\u003e\nE01       |    DAVID       |    HR         |    25     |    2021-01-01        |    GOOD            |    12000     |    FIRST_GRADE\u003cbr\u003e\nE02       |    JOHN        |    SALES      |    35     |    2019-05-04        |    VERY GOOD       |    11000     |    FIRST_GRADE\u003cbr\u003e\nE03       |    MARTIN      |    MARKETING  |    40     |    2018-06-07        |    AVERAGE         |    34000     |    THIRD_GRADE\u003cbr\u003e\nE04       |    TONY        |    MARKETING  |    45     |    2017-02-01        |    VERY VERY GOOD  |    12500     |    SECOND_GRADE\u003cbr\u003e\nE05       |    MARK        |    HR         |    25     |    2020-12-21        |    BAD             |    78999     |    FOURTH_GRADE\u003cbr\u003e\n\u003cbr\u003e\n\u003ch4\u003e Values can also be assigned based on the value of another column\u003c/h4\u003e\n\u003cbr\u003e\nif CaseWhen node is configured as below to compute values for the output column:\u003cbr\u003e\n\u003cbr\u003e\nWHEN CONDITION                        |        VALUE\u003cbr\u003e\n------------------------------------------------------------------\u003cbr\u003e\nSALARY IS NULL                        |        AGE\u003cbr\u003e\nELSE                                  |        SALARY\u003cbr\u003e",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeCaseWhen",
      "x": "1128px",
      "y": "86px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "outputCol",
          "value": "Customer_Loyalty_Group",
          "widget": "textfield",
          "title": "Output Column Name",
          "description": "output column name",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "whenConditions",
          "value": "[\"Revenue \u003c 5500\",\"Revenue \u003e 5500 AND Revenue \u003c 6500\",\"Revenue \u003e 6500 AND Revenue \u003c 7500\",\"Revenue \u003e 7500\"]",
          "widget": "key_array",
          "title": "When",
          "description": "When Condition",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "values",
          "value": "[\"\u0027Bronze\u0027\",\"\u0027Silver\u0027\",\"\u0027Gold\u0027\",\"\u0027Platinum\u0027\"]",
          "widget": "value_array",
          "title": "Then",
          "description": "Value when this condition is true",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "finallyElse",
          "value": "\u0027NA\u0027",
          "widget": "key_textfield",
          "title": "Else",
          "description": "else",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        }
      ],
      "engine": "all"
    },
    {
      "id": "13",
      "name": "Sticky Note",
      "description": "Allows capturing Notes on the Workflow",
      "details": "",
      "examples": "",
      "type": "sticky",
      "nodeClass": "fire.nodes.doc.NodeStickyNote",
      "x": "30px",
      "y": "69px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "bgColor",
          "value": "gray",
          "widget": "textfield",
          "title": "Bg Color",
          "description": "Background of note",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "width",
          "value": "175px",
          "widget": "textfield",
          "title": "Width",
          "description": "Width of note",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "height",
          "value": "53px",
          "widget": "textfield",
          "title": "Height",
          "description": "Height of note",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "comment",
          "value": "\u003cp\u003eAdd Validation Multiple\u003c/p\u003e",
          "widget": "textarea_rich",
          "title": "Comment",
          "description": "Comments for the Workflow",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        }
      ],
      "engine": "all"
    },
    {
      "id": "14",
      "name": "Case When",
      "description": "This node creates a new Dataframe with a new column appended to it containing value based on the condition met",
      "details": "\u003ch2\u003eCase When Node Details\u003c/h2\u003e\n\u003cbr\u003e\nThis node creates a new Dataframe with new output column added to the incoming dataframe. Value of the new column is set based on the Condition met and corresponding value fetched.\u003cbr\u003e\n\u003cbr\u003e\nIt evaluates a set of expressions and outputs value of the expression that evaluates to true. If none of the expressions evaluates to true then it outputs value assigned in the \u0027else\u0027 section.\u003cbr\u003e\n\u003cbr\u003e\n\u003ch3\u003eWhen conditions can be entered as followings:\u003c/h3\u003e\n\u003cbr\u003e\n\u003ch4\u003eUsing Comparison Operators\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\tComparing a value against a String column\t\t-\u003e\t\tExample:\tPRD_CATEGORY \u003d \u0027MACHINE\u0027\u003c/li\u003e\n\u003cli\u003e\tChecking for not equal to condition against a String column\t\t-\u003e\t\tExample:\tPRD_CATEGORY !\u003d \u0027MACHINE\u0027\u003c/li\u003e\n\u003cli\u003e\tComparing a value against a Numeric column\t\t-\u003e\t\tExample:\tAGE \u003e\u003d 35\u003c/li\u003e\n\u003cli\u003e\tUsing a Mathematical operator\t\t\t\t\t-\u003e\t\tExample:\t(AGE * 10) \u003c 90\u003c/li\u003e\n\u003cli\u003e Checking for multiple values using IN and NOT IN  -\u003e  Example:    DEPT IN (\u0027HR\u0027, \u0027SALES\u0027)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eUsing Logical Operators To Combine Multiple Expressions\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\tChecking for two conditions in single expression\t-\u003e\t\tExample:\tDEPT \u003d \u0027HR\u0027 AND AGE \u003e\u003d 25\u003c/li\u003e\n\u003cli\u003e\tChecking for two conditions in single expression\t\t-\u003e\t\tExample:\tAGE \u003e\u003d 35 OR AGE \u003c45\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eChecking For Null Value\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\tChecking whether a column value is Null\t\t\t-\u003e\t\tExample:\tDEPT IS NULL\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eChecking For Blank Value\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\tChecking whether value in a column is empty\t\t-\u003e\t\tExample:\tTRIM(DATE_OF_JOINING) \u003d \u0027\u0027\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eChecking Against Boolean Value\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\tChecking whether a Boolean column is True or False\t\t-\u003e\t\tExample:\tIS_DATEGREATER \u003d TRUE\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eChecking Against Date-Time Value\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\tComparing a Date column against a Date value\t-\u003e\t\tExample:\tCURR_DATE \u003e TO_DATE(\u00272021-12-12\u0027,\u0027yyyy-MM-dd\u0027)\u003c/li\u003e\n\u003cli\u003e\tComparing a Date-Time column against a Date-Time value\t-\u003e\t\tExample:\tCURR_TIME \u003e TO_TIMESTAMP(\u00272021-12-12 12:12:12\u0027,\u0027yyyy-MM-dd HH:mm:ss\u0027)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr\u003e\n\u003ch3\u003eValues can entered as followings:\u003c/h3\u003e\n\u003cbr\u003e\n\u003ch4\u003eAssigning value from a column\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e \tAssigning value from a column[DEPT] to output (Value)\t\t-\u003e\t\tExample:\tDEPT\u003c/li\u003e\n\u003cli\u003e \tApplying a operator before assigning value from a column\t\t-\u003e\t\tExample:\tSALARY * 10\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eAssigning a String or Number constant\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\tAssigning a String constant\t\t-\u003e\t\tExample:\t\u0027DEPT IS HR\u0027\u003c/li\u003e\n\u003cli\u003e\tAssigning a Number constant\t\t-\u003e\t\tExample:\t1000\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eAssigning Current Date and Current Timestamp\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\tAssigning Current Date\t\t-\u003e\t\tExample:\tCURRENT_DATE\u003c/li\u003e\n\u003cli\u003e\tAssigning Current Date-Time\t\t-\u003e\t\tExample:\tCURRENT_TIMESTAMP\u003c/li\u003e\n\u003c/ul\u003e",
      "examples": "\u003ch2\u003eCase When Node Examples\u003c/h2\u003e\n\u003cbr\u003e\n\u003ch4\u003eIncoming Dataframe\u003c/h4\u003e\n\u003cbr\u003e\nIn this example we have considered a Incoming Dataframe with following rows:\u003cbr\u003e\n\u003cbr\u003e\nEMP_CD    |    EMP_NAME    |    DEPT       |    AGE    |    DATE_OF_JOINING   |    PERFORMANCE     |    SALARY\u003cbr\u003e\n------------------------------------------------------------------------------------------------------------------\u003cbr\u003e\nE01       |    DAVID       |    HR         |    25     |    2021-01-01        |    GOOD            |    12000\u003cbr\u003e\nE02       |    JOHN        |    SALES      |    35     |    2019-05-04        |    VERY GOOD       |    11000\u003cbr\u003e\nE03       |    MARTIN      |    MARKETING  |    40     |    2018-06-07        |    AVERAGE         |    34000\u003cbr\u003e\nE04       |    TONY        |    MARKETING  |    45     |    2017-02-01        |    VERY VERY GOOD  |    12500\u003cbr\u003e\nE05       |    MARK        |    HR         |    25     |    2020-12-21        |    BAD             |    78999\u003cbr\u003e\n\u003cbr\u003e\n\u003ch4\u003eCaseWhen Node Configuration\u003c/h4\u003e\n\u003cbr\u003e\nCaseWhen node is configured as below to compute values for the output column:\u003cbr\u003e\n\u003cbr\u003e\nWHEN CONDITION                        |        VALUE\u003cbr\u003e\n------------------------------------------------------------------\u003cbr\u003e\nSALARY \u003c 12500                        |        \u0027FIRST_GRADE\u0027\u003cbr\u003e\nSALARY\u003e\u003d 12500 AND SALARY \u003c 30000     |        \u0027SECOND_GRADE\u0027\u003cbr\u003e\nSALARY \u003e- 30000 AND SALARY \u003c 70000    |        \u0027THIRD_GRADE\u0027\u003cbr\u003e\nELSE                                  |        \u0027FOURTH_GRADE\u0027\u003cbr\u003e\n\u003cbr\u003e\n[ELSE] is the default condition processed if no other condition is met\u003cbr\u003e\n\u003cbr\u003e\n\u003ch4\u003eNode Output\u003c/h4\u003e\n\u003cbr\u003e\nOutput Dataframe would be created as below where value of [SALARY] is compared against [WHEN CONDITION] and [VALUE] is fetched for the output column [SALARY_GRADE]:\u003cbr\u003e\n\u003cbr\u003e\nEMP_CD    |    EMP_NAME    |    DEPT       |    AGE    |    DATE_OF_JOINING   |    PERFORMANCE     |    SALARY    |    SALARY_GRADE\u003cbr\u003e\n---------------------------------------------------------------------------------------------------------------------------------------\u003cbr\u003e\nE01       |    DAVID       |    HR         |    25     |    2021-01-01        |    GOOD            |    12000     |    FIRST_GRADE\u003cbr\u003e\nE02       |    JOHN        |    SALES      |    35     |    2019-05-04        |    VERY GOOD       |    11000     |    FIRST_GRADE\u003cbr\u003e\nE03       |    MARTIN      |    MARKETING  |    40     |    2018-06-07        |    AVERAGE         |    34000     |    THIRD_GRADE\u003cbr\u003e\nE04       |    TONY        |    MARKETING  |    45     |    2017-02-01        |    VERY VERY GOOD  |    12500     |    SECOND_GRADE\u003cbr\u003e\nE05       |    MARK        |    HR         |    25     |    2020-12-21        |    BAD             |    78999     |    FOURTH_GRADE\u003cbr\u003e\n\u003cbr\u003e\n\u003ch4\u003e Values can also be assigned based on the value of another column\u003c/h4\u003e\n\u003cbr\u003e\nif CaseWhen node is configured as below to compute values for the output column:\u003cbr\u003e\n\u003cbr\u003e\nWHEN CONDITION                        |        VALUE\u003cbr\u003e\n------------------------------------------------------------------\u003cbr\u003e\nSALARY IS NULL                        |        AGE\u003cbr\u003e\nELSE                                  |        SALARY\u003cbr\u003e",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeCaseWhen",
      "x": "900px",
      "y": "259px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "outputCol",
          "value": "Discount_Bin",
          "widget": "textfield",
          "title": "Output Column Name",
          "description": "output column name",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "whenConditions",
          "value": "[\"Discount_Perc \u003c 10\",\"Discount_Perc \u003c 15 AND Discount_Perc \u003e 10\",\"Discount_Perc \u003c 20 AND Discount_Perc \u003e 15\",\"Discount_Perc \u003c 25 AND Discount_Perc \u003e 20\",\"Discount_Perc \u003e 25\"]",
          "widget": "key_array",
          "title": "When",
          "description": "When Condition",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "values",
          "value": "[\"\u0027Very Low\u0027\",\"\u0027Low\u0027\",\"\u0027Medium\u0027\",\"\u0027High\u0027\",\"\u0027Very High\u0027\"]",
          "widget": "value_array",
          "title": "Then",
          "description": "Value when this condition is true",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "finallyElse",
          "value": "\u0027NA\u0027",
          "widget": "key_textfield",
          "title": "Else",
          "description": "else",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        }
      ],
      "engine": "all"
    },
    {
      "id": "15",
      "name": "Drop Columns",
      "description": "This node creates a new DataFrame by dropping the specified columns",
      "details": "\u003ch2\u003eDrop Columns Node Details\u003c/h2\u003e\n\u003cbr\u003e\nThis node creates a new DataFrame by dropping the selected columns.\u003cbr\u003e\n\u003cbr\u003e\nIt drops the selected columns from the outgoing dataframe. \u003cbr\u003e\n\u003cbr\u003e\nColumns that need to be dropped are to be selected in the \u0027Selected\u0027 list. Multiple columns can be selected in the list that needs to be dropped.\u003cbr\u003e",
      "examples": "\u003ch2\u003eDrop Columns Node Examples\u003c/h2\u003e\n\u003cbr\u003e\n\u003ch4\u003eIncoming Dataframe\u003c/h4\u003e\n\u003cbr\u003e\nIn this example we have considered an Incoming Dataframe having following columns:\u003cbr\u003e\n\u003cbr\u003e\n\u003cul\u003e\n\u003cli\u003e CUST_CD\u003c/li\u003e\n\u003cli\u003e CUST_NAME\u003c/li\u003e\n\u003cli\u003e DOB\u003c/li\u003e\n\u003cli\u003e ADDRESS\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eDrop Columns Node Configuration And Output\u003c/h4\u003e\n\u003cbr\u003e\n[DOB] and [ADDRESS] columns are selected to be dropped from the outgoing Dataframe. \u003cbr\u003e\nOutgoing dataframe would contain only below two columns after dropping the selected columns:\u003cbr\u003e\n\u003cbr\u003e\n\u003cul\u003e\n\u003cli\u003e DOB\u003c/li\u003e\n\u003cli\u003e ADDRESS\u003c/li\u003e\n\u003c/ul\u003e",
      "type": "transform",
      "nodeClass": "fire.nodes.etl.NodeDropColumns",
      "x": "1256px",
      "y": "75px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "dropCols",
          "value": "[\"Revenue\"]",
          "widget": "variables",
          "title": "Columns",
          "description": "The columns to be excluded from the output DataFrame",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        }
      ],
      "engine": "all"
    },
    {
      "id": "16",
      "name": "Join On Common Column",
      "description": "This node joins the incoming dataframes using one common column between them.",
      "details": "\u003ch2\u003eJoin On Common Column Node Details\u003c/h2\u003e\n\u003cbr\u003e\nThis node joins the incoming dataframes using one common column between the two dataframes. \u003cbr\u003e\n\u003cbr\u003e\nSelect the Common Join Column to be used in the Join.\u003cbr\u003e\n\u003cbr\u003e\nJoining modes supported by this node is as follows:\u003cbr\u003e\n\u003cul\u003e\n\u003cli\u003e inner : The joined table will have records that have matching values in both tables.\u003c/li\u003e\n\u003cli\u003e outer : The joined table contains either all the records from both the tables or fills in NULL values for missing matches on either side.\u003c/li\u003e\n\u003cli\u003e left_outer  : Even if there are no matches in the right table it returns all the rows from the left table.\u003c/li\u003e\n\u003cli\u003e right_outer : Even if there are no matches in the left table it returns all the rows from the right table.\u003c/li\u003e\n\u003cli\u003e leftsemi : This gives only those rows in the left table that have a matching row in the right table.\u003c/li\u003e\n\u003cli\u003e leftanti : This join returns rows in the left table that have no matching rows in the right table.\u003c/li\u003e\n\u003c/ul\u003e",
      "examples": "\u003ch2\u003eJoin On Common Column Example\u003c/h2\u003e\n\u003cbr\u003e\n\u003ch4\u003e Incoming Datasets\u003c/h4\u003e\n\u003cbr\u003e\n1st Incoming Dataframe table1 has the following rows:\u003cbr\u003e\n\u003cbr\u003e\nEMP_CD    |    EMP_NAME    |    DEPT_NO       \u003cbr\u003e\n-------------------------------------------\u003cbr\u003e\nE01       |    DAVID       |    10         \u003cbr\u003e\nE02       |    JOHN        |    20      \u003cbr\u003e\nE03       |    MARTIN      |    30  \u003cbr\u003e\nE04       |    TONY        |    40  \u003cbr\u003e\n\u003cbr\u003e\n2nd Incoming Dataframe table2 has the following rows:\u003cbr\u003e\n\u003cbr\u003e\nDEPT_NO    |      DEPT_NAME   |    LOC       \u003cbr\u003e\n-------------------------------------------\u003cbr\u003e\n10         |      HR          |    IND  \u003cbr\u003e\n20         |      SALES       |    AUS  \u003cbr\u003e\n30         |      MARKETING   |    UK         \u003cbr\u003e\n50         |      RESEARCH    |    NZ      \u003cbr\u003e\n\u003cbr\u003e\nThe common join column is DEPT_NO\u003cbr\u003e\n\u003cbr\u003e\n\u003ch4\u003e When the Joining condition is `inner` we have\u003c/h4\u003e\n\u003ch4\u003e Final Output\u003c/h4\u003e\n\u003cbr\u003e\nEMP_CD    |    EMP_NAME    |    DEPT_NO   |      DEPT_NAME  |    LOC           \u003cbr\u003e\n--------------------------------------------------------------------------------------\u003cbr\u003e\nE01       |    DAVID       |    10        |      HR         |    IND\u003cbr\u003e\nE02       |    JOHN        |    20        |      SALES      |    AUS\u003cbr\u003e\nE03       |    MARTIN      |    30        |      MARKETING  |    UK\u003cbr\u003e\n\u003cbr\u003e\n\u003ch4\u003e When the Joining condition `outer` we have\u003c/h4\u003e\n\u003ch4\u003e Final Output\u003c/h4\u003e\n\u003cbr\u003e\nEMP_CD    |    EMP_NAME    |    DEPT_NO   |   DEPT_NAME  |    LOC           \u003cbr\u003e\n--------------------------------------------------------------------------------------\u003cbr\u003e\nE01       |    DAVID       |    10        |   HR         |    IND\u003cbr\u003e\nE02       |    JOHN        |    20        |   SALES      |    AUS\u003cbr\u003e\nE03       |    MARTIN      |    30        |   MARKETING  |    UK\u003cbr\u003e\nE04       |    TONY        |    40        |              |    \u003cbr\u003e\n          |                |              |   RESEARCH   |    NZ\u003cbr\u003e\n\u003cbr\u003e\n\u003ch4\u003e When the Joining condition is `left_outer` we have\u003c/h4\u003e\n\u003ch4\u003e Final Output\u003c/h4\u003e\n\u003cbr\u003e\nEMP_CD    |    EMP_NAME    |    DEPT_NO   |   DEPT_NAME  |    LOC           \u003cbr\u003e\n--------------------------------------------------------------------------------------\u003cbr\u003e\nE01       |    DAVID       |    10        |   HR         |    IND\u003cbr\u003e\nE02       |    JOHN        |    20        |   SALES      |    AUS\u003cbr\u003e\nE03       |    MARTIN      |    30        |   MARKETING  |    UK\u003cbr\u003e\nE04       |    TONY        |    40        |              |    \u003cbr\u003e\n\u003cbr\u003e\n\u003ch4\u003e When the Joining condition `right_outer` we have\u003c/h4\u003e\n\u003ch4\u003e Final Output\u003c/h4\u003e\n          \u003cbr\u003e\nEMP_CD    |    EMP_NAME    |    DEPT_NO   |   DEPT_NAME  |    LOC           \u003cbr\u003e\n--------------------------------------------------------------------------------------\u003cbr\u003e\nE01       |    DAVID       |    10        |   HR         |    IND\u003cbr\u003e\nE02       |    JOHN        |    20        |   SALES      |    AUS\u003cbr\u003e\nE03       |    MARTIN      |    30        |   MARKETING  |    UK\u003cbr\u003e\n          |                |    50        |   RESEARCH   |    NZ\u003cbr\u003e",
      "type": "join",
      "nodeClass": "fire.nodes.etl.NodeJoinUsingColumn",
      "x": "1299px",
      "y": "300px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "joinCol",
          "value": "Customer_Name",
          "widget": "variable_common",
          "title": "Common Join Column",
          "description": "column on which to join",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "joinType",
          "value": "inner",
          "widget": "array",
          "title": "JoinType",
          "description": "type of join",
          "optionsArray": [
            "inner",
            "outer",
            "leftouter",
            "rightouter",
            "leftsemi",
            "leftanti"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "schema",
          "value": "",
          "widget": "tab",
          "title": "Schema",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "outputColNames",
          "value": "[\"Customer_Name\",\"Product_ID\",\"Transaction_ID\",\"Customer_ID\",\"Customer_Type\",\"Country\",\"State\",\"City\",\"Sales_Org\",\"Quantity\",\"Order_ID\",\"Order_Date\",\"Sales_Channel\",\"Order_Status\",\"Currency_Type\",\"Price\",\"Tax\",\"Discount_Perc\",\"Payment_Terms\",\"Transaction_Date\",\"Product_Group_Code\",\"Product_Group_Desc\",\"Order_Date_Type\",\"Order_Month\",\"Order_Day\",\"Discount_Bin\",\"Customer_Loyalty_Group\"]",
          "widget": "schema_col_names",
          "title": "Output Column Names",
          "description": "Name of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "outputColTypes",
          "value": "[\"STRING\",\"INTEGER\",\"DOUBLE\",\"DOUBLE\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"INTEGER\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"STRING\",\"DOUBLE\",\"DOUBLE\",\"DOUBLE\",\"STRING\",\"STRING\",\"INTEGER\",\"STRING\",\"DATE\",\"INTEGER\",\"INTEGER\",\"STRING\",\"STRING\"]",
          "widget": "schema_col_types",
          "title": "Output Column Types",
          "description": "Data Type of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "outputColFormats",
          "value": "[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]",
          "widget": "schema_col_formats",
          "title": "Output Column Formats",
          "description": "Format of the Output Columns",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        }
      ],
      "engine": "all"
    },
    {
      "id": "17",
      "name": "Print N Rows",
      "description": "Prints the specified number of records in the DataFrame. It is useful for seeing intermediate output",
      "details": "\u003ch2\u003ePrint N Rows Node Details\u003c/h2\u003e\n\u003cbr\u003e\nThis node is used to print the first N rows from the incoming dataframe.\u003cbr\u003e\n\u003cbr\u003e\nThe Number of rows that needs to be printed can be configured in the node.\u003cbr\u003e\n\u003cbr\u003e\n\u003ch4\u003eInput Parameters\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e OUTPUT STORAGE LEVEL : Keep this as DEFAULT.\u003c/li\u003e\n\u003cli\u003e TITLE : Enter a short description for the type of information being displayed.\u003c/li\u003e\n\u003cli\u003e NUM ROWS TO PRINT : Set an integer value(N) which controls the number of rows to be displayed(Default N\u003d10).\u003c/li\u003e\n\u003cli\u003e DISPLAY DATA TYPE : Shows the output dataframe column datatypes by default.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4\u003eOutput\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e This node can be used to view, analyze and validate the output of the Dataframe.\u003c/li\u003e\n\u003c/ul\u003e",
      "examples": "",
      "type": "transform",
      "nodeClass": "fire.nodes.util.NodePrintFirstNRows",
      "x": "1489px",
      "y": "180px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "title",
          "value": "Row Values",
          "widget": "textfield",
          "title": "Title",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "n",
          "value": "50",
          "widget": "textfield",
          "title": "Num Rows to Print",
          "description": "number of rows to be printed",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "displayDataType",
          "value": "true",
          "widget": "array",
          "title": "Display Data Type",
          "description": "If true display rows DataType",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        }
      ],
      "engine": "all"
    },
    {
      "id": "18",
      "name": "Save CSV",
      "description": "Saves the DataFrame into the specified location in CSV Format",
      "details": "This node saves incoming Dataframe into the specified location in CSV format.\u003cbr\u003e",
      "examples": "",
      "type": "transform",
      "nodeClass": "fire.nodes.save.NodeSaveCSV",
      "x": "1501px",
      "y": "296px",
      "fields": [
        {
          "name": "storageLevel",
          "value": "DEFAULT",
          "widget": "array",
          "title": "Output Storage Level",
          "description": "Storage Level of the Output Datasets of this Node",
          "optionsArray": [
            "DEFAULT",
            "NONE",
            "DISK_ONLY",
            "DISK_ONLY_2",
            "MEMORY_ONLY",
            "MEMORY_ONLY_2",
            "MEMORY_ONLY_SER",
            "MEMORY_ONLY_SER_2",
            "MEMORY_AND_DISK",
            "MEMORY_AND_DISK_2",
            "MEMORY_AND_DISK_SER",
            "MEMORY_AND_DISK_SER_2",
            "OFF_HEAP"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "path",
          "value": "/home/sparkflows/fire-data/ETL_Sample_Data/ETL_Cleaned_Data",
          "widget": "textfield",
          "title": "Path",
          "description": "Path where to save the CSV files",
          "required": true,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "saveMode",
          "value": "Overwrite",
          "widget": "array",
          "title": "Save Mode",
          "description": "Whether to Append, Overwrite or Error if the path Exists",
          "optionsArray": [
            "Append",
            "Overwrite",
            "ErrorIfExists",
            "Ignore"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "header",
          "value": "true",
          "widget": "array",
          "title": "Header",
          "description": "Should a Header Row be saved with each File?",
          "optionsArray": [
            "true",
            "false"
          ],
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "encoding",
          "value": "UTF-8",
          "widget": "textfield",
          "title": "Encoding",
          "description": "Decodes the CSV files by the given encoding type",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "quote",
          "value": "\"",
          "widget": "textfield",
          "title": "Quote",
          "description": "Sets a single character used for escaping quoted values where the separator can be part of the value",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "escape",
          "value": "\\",
          "widget": "textfield",
          "title": "Escape",
          "description": "Sets a single character used for escaping quotes inside an already quoted value.",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "advanced",
          "value": "",
          "widget": "tab",
          "title": "Advanced",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        },
        {
          "name": "partitionColNames",
          "value": "[]",
          "widget": "variables",
          "title": "Partition Column Names",
          "description": "Partition Column Names",
          "required": false,
          "display": true,
          "editable": true,
          "disableRefresh": false,
          "expandable": false
        }
      ],
      "engine": "all"
    }
  ],
  "edges": [
    {
      "source": "1",
      "target": "3",
      "id": 1
    },
    {
      "source": "1",
      "target": "4",
      "id": 2
    },
    {
      "source": "4",
      "target": "5",
      "id": 3
    },
    {
      "source": "5",
      "target": "6",
      "id": 4
    },
    {
      "source": "4",
      "target": "8",
      "id": 5
    },
    {
      "source": "8",
      "target": "7",
      "id": 6
    },
    {
      "source": "7",
      "target": "9",
      "id": 7
    },
    {
      "source": "10",
      "target": "11",
      "id": 8
    },
    {
      "source": "9",
      "target": "14",
      "id": 9
    },
    {
      "source": "14",
      "target": "10",
      "id": 10
    },
    {
      "source": "11",
      "target": "15",
      "id": 11
    },
    {
      "source": "14",
      "target": "16",
      "id": 12
    },
    {
      "source": "15",
      "target": "16",
      "id": 13
    },
    {
      "source": "16",
      "target": "17",
      "id": 14
    },
    {
      "source": "16",
      "target": "18",
      "id": 15
    }
  ],
  "dataSetDetails": [],
  "engine": "scala"
}